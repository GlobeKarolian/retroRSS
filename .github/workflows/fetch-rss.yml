name: Fetch Boston.com RSS Feed

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main

jobs:
  fetch-rss:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Fetch and parse RSS feed
        run: |
          node << 'EOF'
          const https = require('https');
          const fs = require('fs');
          
          const RSS_URL = 'https://www.boston.com/bdc-msn-rss';
          
          function fetchRSS(url) {
            return new Promise((resolve, reject) => {
              https.get(url, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => resolve(data));
              }).on('error', reject);
            });
          }
          
          function parseRSS(xml) {
            const items = [];
            const itemRegex = /<item>([\s\S]*?)<\/item>/g;
            let match;
            
            while ((match = itemRegex.exec(xml)) !== null) {
              const itemContent = match[1];
              
              const title = (itemContent.match(/<title><!\[CDATA\[(.*?)\]\]><\/title>/) || 
                            itemContent.match(/<title>(.*?)<\/title>/) || [])[1] || '';
              
              const link = (itemContent.match(/<link>(.*?)<\/link>/) || [])[1] || '';
              
              const description = (itemContent.match(/<description><!\[CDATA\[([\s\S]*?)\]\]><\/description>/) || 
                                  itemContent.match(/<description>([\s\S]*?)<\/description>/) || [])[1] || '';
              
              const pubDate = (itemContent.match(/<pubDate>(.*?)<\/pubDate>/) || [])[1] || '';
              
              items.push({
                title: title.trim(),
                link: link.trim(),
                description: description.trim(),
                pubDate: pubDate.trim()
              });
            }
            
            return items;
          }
          
          async function main() {
            try {
              console.log('Fetching RSS feed from Boston.com...');
              const xml = await fetchRSS(RSS_URL);
              
              console.log('Parsing RSS feed...');
              const articles = parseRSS(xml);
              
              console.log(`Found ${articles.length} articles`);
              
              const output = {
                lastUpdated: new Date().toISOString(),
                articles: articles.slice(0, 20) // Keep latest 20 articles
              };
              
              fs.writeFileSync('articles.json', JSON.stringify(output, null, 2));
              console.log('Successfully wrote articles.json');
              
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }
          
          main();
          EOF
          
      - name: Commit and push if changed
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add articles.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update RSS feed - $(date)" && git push)
